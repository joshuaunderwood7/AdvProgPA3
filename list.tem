// Author: Joshua Underwoood 
// Course:  CSCI 3320, Spring 2013
// File: list.tem
// Class inplementation of an adt that represents a single-ended, 
// singly-linked list with iterator support
// for compatibility with the C++ standard template library


// Constructors
template <typename T>
list<T>::list()
{
    head = NULL;
    used = 0;
};

template <typename T>
list<T>::list(const list<T>& input)
{
    if(!input.empty())
    {
        push_front(input.begin()->data);
        iterator marker = begin();
        
        for(iterator i = input.begin(); i != input.end(); )
        {
            i++;
            insert_after(marker, i->data);
            marker++;
        }
        insert_after(marker, input.end()->data);
    }
    else 
    {
        head = NULL;
        used = 0;
    }
    
};

template <typename T>
list<T>::list(iterator from, iterator to)
{
    push_front(from->data);
    iterator marker  = begin();
    
    for(iterator i = from; i != to; )
    {
        i++;
        insert_after(marker, i->data);
        marker++;
    }
    insert_after(marker, to->data);
};

template <typename T>
list<T>::list(T*, T*) { };

template <typename T>
list<T>::~list()
{
    while(!empty())
    {
        pop_front();
    }
};

// Constant members
//unsigned size() const { return used; }
//bool empty() const { return used==0; }
template <typename T>
const T& list<T>::front() const
{
    if(!empty()) return begin()->data;
    std::cerr << "Empty list\n";
    return NULL;
};

template <typename T>
const typename list<T>::iterator list<T>::find(const T& input) const
{
    for(iterator i = begin(); i != NULL; i++)
    {
        if(i->data == input) return i;
    }   
    return NULL;
};

// Modification members
template <typename T>
void list<T>::push_front(const T& input)
{
    node* newnode = new node;    
    newnode->data = input;
    newnode->link = head;
    head = newnode;
    ++used;
};

template <typename T>
void list<T>::pop_front()
{
    node* newnode = head;
    head = head->link;
    delete newnode;    
    --used;
};

template <typename T>
typename list<T>::iterator list<T>::find(const T& input)
{
    for(iterator i = begin(); i != NULL; i++)
    {
        if(i->data == input) return i;
    }   
    return NULL;
};

template <typename T>
void list<T>::insert(const T& value, unsigned int where=0)
{
    node* newnode = new node;
    newnode->data = value;
    iterator iter = begin();
    unsigned int i = 0;
    while(i < where-1) iter++;
    if(iter == begin()) push_front(value);
    else
    {
        if(iter->link != NULL)
        {
        newnode->link = iter->link->link;
        iter->link = newnode;
        }
        else
        {
            iter->link = newnode;
            newnode->link = NULL;
        }
    }
};

template <typename T>
void list<T>::insert_after(iterator instertion_point, const T& input_data)
{
    node* newnode = new node;
    newnode->data = input_data;
    newnode->link = instertion_point->link;
    instertion_point->link = newnode;
    ++used;
};

template <typename T>
bool list<T>::erase_one(const T& value)
{
    iterator i = find(value);
    if(i == NULL) return false;

    for(iterator j = begin(); j != NULL; j++)
    {
        if(j->link == i) 
        {
            j->link = i->link;
            delete i;
            used--;
            return true;
        }
    }   
};

template <typename T>
unsigned int list<T>::erase(const T& value)
{
    unsigned int i = 0;
    while(erase_one(value))
    {
        ++i;
    }
    return i;
};

template <typename T>
void list<T>::clear()
{
    while(!empty())
    {
        pop_front();
    }    
};

// Operators
template <typename T>
list<T>& list<T>::operator = (const list<T>& RHS)
{
    delete RHS;
    RHS = list<T>(*this);
    return *this;
};

template <typename T>
void list<T>::operator += (const list<T>& RHS)
{
    iterator i = this->begin();
    while(i->link != NULL) i++;

    iterator j = RHS.begin();
    while(j->link != NULL)
    {
        insert_after(i, j->data);
        i++;
        j++;
    }
};

// Friends
template <typename T>
std::ostream& operator << (std::ostream& out, const list<T>& theList)
{
    out << "< ";
    typename list<T>::iterator i = theList.begin();
    for( ; i != theList.end(); i++)
    {
        out << i->data << ", ";
    }
    out << i->data << " >\n";
    return out;
};

//template <typename T>
//class node_iterator<T>;

// Forward iterator support
template <typename T>
typename list<T>::iterator list<T>::begin()
{
    return head;    
};

template <typename T>
typename list<T>::iterator list<T>::end()
{
    iterator i = begin();
    while(i->link != NULL) i++;
    return i;    
};

//private:
// Nest our linked-list node
template <typename T>
typename list<T>::node* list<T>::copy(node* input)
{
    node* newnode = new node;
    newnode->data = input->data;
    newnode->link = input->link;
    return newnode;    
};

