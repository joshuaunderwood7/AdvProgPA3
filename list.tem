// Author: Joshua Underwoood 
// Course:  CSCI 3320, Spring 2013
// File: list.tem
// Class inplementation of an adt that represents a single-ended, 
// singly-linked list with iterator support
// for compatibility with the C++ standard template library


// Constructors
template <typename T>
list<T>::list()
{
    head = NULL;
    used = 0;
};

template <typename T>
list<T>::list(const list<T>& input)
{
    head = NULL;
    used = 0;
    
    list<T> reversed;
    for(node* i = input.head; i != NULL; i = i->link)
    {
        reversed.push_front(i->data);
    }
    while(!reversed.empty())
    {
        push_front(reversed.front());
        reversed.pop_front();
    }
};


template <typename T>
list<T>::list(iterator from, iterator to)
{
    push_front(from.element->data);
    iterator marker  = begin();
    
    for(iterator i = from; i != to; )
    {
        i++;
        insert_after(marker, i.element->data);
        marker++;
    }
};


template <typename T>
list<T>::list(T* from, T* to) 
{ 
    head = NULL;
    used = 0;

    for(T i = *from; i <= *to; ++i)
    {
        push_front(i);
    }
};

template <typename T>
list<T>::~list()
{
    while(!empty())
    {
        pop_front();
    }
};

// Constant members

template <typename T>
const T& list<T>::front() const
{
    if(!empty()) return head->data;
    std::cerr << "Empty list\n";
    return T();
};

/*
template <typename T>
const typename list<T>::iterator list<T>::find(const T& input) const
{
    for(iterator i = begin(); i != NULL; i++)
    {
        if(i->data == input) return i;
    }   
    return NULL;
};
*/

// Modification members
template <typename T>
void list<T>::push_front(const T& input)
{
    node* newnode = new node(input, head);    
    head = newnode;
    ++used;
};

template <typename T>
void list<T>::pop_front()
{
    node* newnode = head;
    head = head->link;
    delete newnode;    
    --used;
};

/*
template <typename T>
typename list<T>::iterator list<T>::find(const T& input)
{
    for(iterator i = begin(); i != NULL; i++)
    {
        if(i->data == input) return i;
    }   
    return NULL;
};
*/

template <typename T>
void list<T>::insert(const T& value, unsigned int where=0)
{
    node* newnode = new node;
    newnode->data = value;
    node*  iter = head;
    unsigned int i = 0;
    if(where == 0)
    {
        push_front(value);
        return;
    }

    if(iter == NULL) 
    {
        std::cerr << "List too short (empty) adding " << value <<
                    "to front of list\n";
        push_front(value);
        return;
    }

    while(i < where-1 && iter->link != NULL) 
    {
        i++;
        iter = iter->link;
    }

    if(iter->link == NULL)
    {
        std::cerr << "List too short. Adding " << value << " to end of list\n";   
        iter->link = newnode;
        newnode->link = NULL;
        used++;
        return;     
    } 

    newnode->link = iter->link;
    iter->link = newnode;
    used++;
    return;
};

template <typename T>
void list<T>::insert_after(iterator instertion_point, const T& input_data)
{
    node* newnode = new node;
    newnode->data = input_data;
    newnode->link = instertion_point.element->link;
    instertion_point.element->link = newnode;
    ++used;
};

template <typename T>
bool list<T>::erase_one(const T& value)
{
    node* i = head;
    if(i == NULL) return false;

    if(i->data == value)
    {
        head = i->link;
        delete i;
        used--;
        return true;
    }

    for(node* j = head; j != NULL; j = j->link)
    {
        i = j->link;
        
        if(i == NULL) return false;

        if(i->data == value) 
        {
            j->link = i->link;
            delete i;
            used--;
            return true;
        }
    }   
};

template <typename T>
unsigned int list<T>::erase(const T& value)
{
    unsigned int i = 0;
    while(erase_one(value)) i++;
    return i;
};

template <typename T>
void list<T>::clear()
{
    while(!empty()) 
    {
        pop_front();    
    }
};

// Operators
template <typename T>
list<T>& list<T>::operator = (const list<T>& RHS)
{
    this->clear();
    list<T> copy(RHS);
    list<T> reversed;
    while(!copy.empty())
    {
        reversed.push_front(copy.front());
        copy.pop_front();
    }
    while(!reversed.empty())
    {
        this->push_front(reversed.front());
        reversed.pop_front();
    }
    return *this;
};

template <typename T>
void list<T>::operator += (const list<T>& RHS)
{
    list<T> copy(RHS);
    list<T> reversed;

    while(!this->empty())
    {
        reversed.push_front(this->front());
        this->pop_front();
    }
    while(!copy.empty())
    {
        reversed.push_front(copy.front());
        copy.pop_front();
    }
    while(!reversed.empty())
    {
        this->push_front(reversed.front());
        reversed.pop_front();
    }
};

// Friends
template <typename T>
std::ostream& operator << (std::ostream& out, const list<T>& theList)
{
    typename list<T>::node* i;
    out << "< ";
    for(i = theList.head ; i != NULL; i = i->link)
    {
        out << i->data << ", ";
    }
    out << " >\n";
    return out;
};


// Forward iterator support

template <typename T>
typename list<T>::iterator list<T>::begin() 
{
    std::cout << "begin()\n";
    list<T>::iterator newnode;
    std::cout << "iterator ok\n";
    newnode.element = copy(head);
    std::cout << "element->link = head\n";
    return newnode;    
};

template <typename T>
typename list<T>::iterator list<T>::end()
{
    iterator i = begin();
    while(i.element->link != NULL) i++;
    return i;    
};


//private:
// Nest our linked-list node
template <typename T>
typename list<T>::node* list<T>::copy(node* input)
{
    std::cout << "copy()\n";
    node* newnode = new node;
    std::cout << " copy():newnode made\n";
    std::cout << " newnode-> data = " << newnode->data << std::endl;
    std::cout << " input-> data = " << input->data << std::endl;
    newnode->data = input->data;
    std::cout << " copy() data copied\n";
    newnode->link = input->link;
    std::cout << " copy(): link copied\n";
    return newnode;    
};

